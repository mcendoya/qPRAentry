setwd("./qPRAentry")
library(devtools)
load_all()
document()
# build() #tar.gz
ntrade_app()
usethis::use_package('knitr')
library(dplyr)
df <- data.frame(aaa = c("a", "b", "c"), bbb=1:3, ccc=1)
x <- c("bbb", "ccc")
df %>% select(x)
df %>% select(all_of(x))
?ntrade
# Total extra-import data: the total import is identified as partner "Extra_Total"
extra_total <- datatrade_EU$extra_import %>% filter(partner=="Extra_Total")
# Extra-import data from countries where the pest is present
extra_pest <- datatrade_EU$extra_import %>% filter(partner!="Extra_Total")
# Intra-trade data
intra_trade  <- datatrade_EU$intra_trade
# Internal production data
internal_production  <- datatrade_EU$internal_production
# Generate trade data (TradeData object)
trade_EU <- trade_data(extra_total = extra_total,
extra_pest = extra_pest,
intra_trade = intra_trade,
internal_production = internal_production)
# Ntrade mean and sd for the time periods
ntrade_EU <- ntrade(trade = trade_EU,
summarize_ntrade = c("mean", "sd"))
View(ntrade_EU)
########################################
time_period <- 2023
prop_data <- NULL
if (is.null(prop_data)) {
prop_df <- cached_get_eurostat_data(to_nuts) %>%
filter(TIME_PERIOD %in% time_period)
if(length(unique(prop_df$TIME_PERIOD))>1){
prop_df <- prop_df %>%
group_by(geo) %>%
summarise(values_redistribution = mean(values, na.rm=TRUE))
}else{
prop_df <- prop_df %>%
select(geo, values) %>%
rename(values_redistribution = values)
}
}else{
new_cols <- c(geo = prop_nuts_column, values_redistribution = prop_values_column)
prop_df <- prop_data %>%
rename(all_of(new_cols)) %>%
select(geo, values_redistribution)
}
to_nuts <- 2
if (is.null(prop_data)) {
prop_df <- cached_get_eurostat_data(to_nuts) %>%
filter(TIME_PERIOD %in% time_period)
if(length(unique(prop_df$TIME_PERIOD))>1){
prop_df <- prop_df %>%
group_by(geo) %>%
summarise(values_redistribution = mean(values, na.rm=TRUE))
}else{
prop_df <- prop_df %>%
select(geo, values) %>%
rename(values_redistribution = values)
}
}else{
new_cols <- c(geo = prop_nuts_column, values_redistribution = prop_values_column)
prop_df <- prop_data %>%
rename(all_of(new_cols)) %>%
select(geo, values_redistribution)
}
View(prop_df)
ntrade_data <- ntrade_EU
nuts_column <- "IDs"
prop_df <- prop_df %>%
mutate(NUTS0 = substr(geo, 1, 2)) %>%
filter(NUTS0 %in% unique(ntrade_data[[nuts_column]])) %>%
group_by(NUTS0) %>%
mutate(proportion = values_redistribution / sum(values_redistribution)) %>% # Proportion per NUTS0
ungroup(NUTS0)
########################################
time_period <- 2020
if (is.null(prop_data)) {
prop_df <- cached_get_eurostat_data(to_nuts) %>%
filter(TIME_PERIOD %in% time_period)
if(length(unique(prop_df$TIME_PERIOD))>1){
prop_df <- prop_df %>%
group_by(geo) %>%
summarise(values_redistribution = mean(values, na.rm=TRUE))
}else{
prop_df <- prop_df %>%
select(geo, values) %>%
rename(values_redistribution = values)
}
}else{
new_cols <- c(geo = prop_nuts_column, values_redistribution = prop_values_column)
prop_df <- prop_data %>%
rename(all_of(new_cols)) %>%
select(geo, values_redistribution)
}
########################################
time_period <- 2019
if (is.null(prop_data)) {
prop_df <- cached_get_eurostat_data(to_nuts) %>%
filter(TIME_PERIOD %in% time_period)
if(length(unique(prop_df$TIME_PERIOD))>1){
prop_df <- prop_df %>%
group_by(geo) %>%
summarise(values_redistribution = mean(values, na.rm=TRUE))
}else{
prop_df <- prop_df %>%
select(geo, values) %>%
rename(values_redistribution = values)
}
}else{
new_cols <- c(geo = prop_nuts_column, values_redistribution = prop_values_column)
prop_df <- prop_data %>%
rename(all_of(new_cols)) %>%
select(geo, values_redistribution)
}
View(prop_df)
to_nuts <- 3
if (is.null(prop_data)) {
prop_df <- cached_get_eurostat_data(to_nuts) %>%
filter(TIME_PERIOD %in% time_period)
if(length(unique(prop_df$TIME_PERIOD))>1){
prop_df <- prop_df %>%
group_by(geo) %>%
summarise(values_redistribution = mean(values, na.rm=TRUE))
}else{
prop_df <- prop_df %>%
select(geo, values) %>%
rename(values_redistribution = values)
}
}else{
new_cols <- c(geo = prop_nuts_column, values_redistribution = prop_values_column)
prop_df <- prop_data %>%
rename(all_of(new_cols)) %>%
select(geo, values_redistribution)
}
to_nuts <- 2
if (is.null(prop_data)) {
prop_df <- cached_get_eurostat_data(to_nuts) %>%
filter(TIME_PERIOD %in% time_period)
if(length(unique(prop_df$TIME_PERIOD))>1){
prop_df <- prop_df %>%
group_by(geo) %>%
summarise(values_redistribution = mean(values, na.rm=TRUE))
}else{
prop_df <- prop_df %>%
select(geo, values) %>%
rename(values_redistribution = values)
}
}else{
new_cols <- c(geo = prop_nuts_column, values_redistribution = prop_values_column)
prop_df <- prop_data %>%
rename(all_of(new_cols)) %>%
select(geo, values_redistribution)
}
##############
n1 <- giscoR::gisco_get_nuts(nuts_level=1)
n2 <- giscoR::gisco_get_nuts(nuts_level=2)
n3 <- giscoR::gisco_get_nuts(nuts_level=3)
View(n1)
View(n2)
View(n3)
##############
n1 <- giscoR::gisco_get_nuts(nuts_level=1) %>% select(NUTS_ID)
n2 <- giscoR::gisco_get_nuts(nuts_level=2) %>% select(NUTS_ID)
n3 <- giscoR::gisco_get_nuts(nuts_level=3) %>% select(NUTS_ID)
View(n1)
n1 <- giscoR::gisco_get_nuts(nuts_level=1)[,"NUTS_ID"]
View(n1)
n1 <- giscoR::gisco_get_nuts(nuts_level=1)$NUTS_ID
##############
n1 <- giscoR::gisco_get_nuts(nuts_level=1) %>% select(NUTS_ID)
##############
n1 <- giscoR::gisco_get_nuts(nuts_level=1)$NUTS_ID
n2 <- giscoR::gisco_get_nuts(nuts_level=2)$NUTS_ID
n3 <- giscoR::gisco_get_nuts(nuts_level=3)$NUTS_ID
load_all()
document()
########################################
time_period <- 2019
prop_data <- NULL
to_nuts <- 2
ntrade_data <- ntrade_EU
nuts_column <- "IDs"
if (is.null(prop_data)) {
prop_df <- cached_get_eurostat_data(to_nuts) %>%
filter(TIME_PERIOD %in% time_period)
if(length(unique(prop_df$TIME_PERIOD))>1){
prop_df <- prop_df %>%
group_by(geo) %>%
summarise(values_redistribution = mean(values, na.rm=TRUE))
}else{
prop_df <- prop_df %>%
select(geo, values) %>%
rename(values_redistribution = values)
}
}else{
new_cols <- c(geo = prop_nuts_column, values_redistribution = prop_values_column)
prop_df <- prop_data %>%
rename(all_of(new_cols)) %>%
select(geo, values_redistribution)
}
View(prop_df)
to_nuts <- 3
if (is.null(prop_data)) {
prop_df <- cached_get_eurostat_data(to_nuts) %>%
filter(TIME_PERIOD %in% time_period)
if(length(unique(prop_df$TIME_PERIOD))>1){
prop_df <- prop_df %>%
group_by(geo) %>%
summarise(values_redistribution = mean(values, na.rm=TRUE))
}else{
prop_df <- prop_df %>%
select(geo, values) %>%
rename(values_redistribution = values)
}
}else{
new_cols <- c(geo = prop_nuts_column, values_redistribution = prop_values_column)
prop_df <- prop_data %>%
rename(all_of(new_cols)) %>%
select(geo, values_redistribution)
}
View(prop_df)
to_nuts <- 2
if (is.null(prop_data)) {
prop_df <- cached_get_eurostat_data(to_nuts) %>%
filter(TIME_PERIOD %in% time_period)
if(length(unique(prop_df$TIME_PERIOD))>1){
prop_df <- prop_df %>%
group_by(geo) %>%
summarise(values_redistribution = mean(values, na.rm=TRUE))
}else{
prop_df <- prop_df %>%
select(geo, values) %>%
rename(values_redistribution = values)
}
}else{
new_cols <- c(geo = prop_nuts_column, values_redistribution = prop_values_column)
prop_df <- prop_data %>%
rename(all_of(new_cols)) %>%
select(geo, values_redistribution)
}
prop_df <- prop_df %>%
mutate(NUTS0 = substr(geo, 1, 2)) %>%
filter(NUTS0 %in% unique(ntrade_data[[nuts_column]])) %>%
group_by(NUTS0) %>%
mutate(proportion = values_redistribution / sum(values_redistribution)) %>% # Proportion per NUTS0
ungroup(NUTS0)
values_column <- "mean"
df <- prop_df %>%
left_join(select(ntrade_data, !!nuts_column, !!values_column),
by = c("NUTS0"=nuts_column)) %>%
mutate(across(all_of(values_column),
.fns = list(NUTS2 = ~. * proportion)))
View(df)
df <- prop_df %>%
left_join(select(ntrade_data, !!nuts_column, !!values_column),
by = c("NUTS0"=nuts_column)) %>%
mutate(across(all_of(values_column),
.fns = list(NUTS2 = ~. * proportion),
.names = !!paste0("{col}_NUTS", to_nuts)))
View(df)
df <- prop_df %>%
left_join(select(ntrade_data, !!nuts_column, !!values_column),
by = c("NUTS0"=nuts_column)) %>%
mutate(across(all_of(values_column),
.fns = list(redist = ~. * proportion))
df <- prop_df %>%
left_join(select(ntrade_data, !!nuts_column, !!values_column),
by = c("NUTS0"=nuts_column)) %>%
mutate(across(all_of(values_column),
.fns = list(redist = ~. * proportion)))
df <- prop_df %>%
left_join(select(ntrade_data, !!nuts_column, !!values_column),
by = c("NUTS0"=nuts_column)) %>%
mutate(across(all_of(values_column),
.fns = list(redist = ~. * proportion))) %>%
rename(!!paste0("NUTS", to_nuts) := geo)
df <- prop_df %>%
left_join(select(ntrade_data, !!nuts_column, !!values_column),
by = c("NUTS0"=nuts_column)) %>%
mutate(across(all_of(values_column),
.fns = list(redist = ~. * proportion))) %>%
rename(!!paste0("NUTS", to_nuts) := geo) %>%
select(!!paste0("NUTS", to_nuts),
proportion,
ends_with("redist"))
sum(df$proportion[1:3,])
sum(df$proportion[1:3])
sum(df$proportion[12:22])
?substr
df <- prop_df %>%
left_join(select(ntrade_data, !!nuts_column, !!values_column),
by = c("NUTS0"=nuts_column)) %>%
mutate(across(all_of(values_column),
.fns = list(redist = ~. * proportion))) %>%
rename(!!paste0("NUTS", to_nuts) := geo) %>%
select(!!paste0("NUTS", to_nuts),
proportion,
ends_with("redist")) %>%
rename_with(~ sub("_redist$", "", .), ends_with("redist"))
?ntrade_redist
?ntrade
?ntrade
?trade_data
?plot_countries
data("gisco_countrycode")
giscoR::data("gisco_countrycode")
library(giscoR)
data("gisco_countrycode")
force(gisco_countrycode)
View(trade_EU)
?ntrade_redist
?plot_countries
?plot_nuts2
load_all()
document()
pathway_app()
load_all()
document()
# build() #tar.gz
ntrade_app()
?tabPanel
?navbarPage
load_all()
document()
# build() #tar.gz
ntrade_app()
load_all()
document()
# build() #tar.gz
ntrade_app()
load_all()
document()
# build() #tar.gz
ntrade_app()
load_all()
document()
# build() #tar.gz
ntrade_app()
load_all()
document()
# build() #tar.gz
ntrade_app()
load_all()
document()
# build() #tar.gz
ntrade_app()
load_all()
document()
# build() #tar.gz
ntrade_app()
load_all()
document()
# build() #tar.gz
ntrade_app()
load_all()
document()
# build() #tar.gz
ntrade_app()
load_all()
document()
# build() #tar.gz
ntrade_app()
load_all()
document()
pathway_app()
pathway_app()
load_all()
document()
pathway_app()
load_all()
document()
pathway_app()
load_all()
load_all()
document()
pathway_app()
load_all()
document()
pathway_app()
