# Remove if you have it installed!!
remove.packages("qPRAentry")
# Set working directory to the folder in which you have the package file
install.packages("./qPRAentry.tar.gz", repos = NULL, type = "source", dependencies = TRUE)
library(qPRAentry)
ntrade_app()
# Remove if you have it installed!!
remove.packages("qPRAentry")
# Set working directory to the folder in which you have the package file
install.packages("./qPRAentry.tar.gz", repos = NULL, type = "source", dependencies = TRUE)
library(qPRAentry)
ntrade_app()
########################################
# test functions
library(devtools)
setwd("~/Documentos/ENTRY_qPRA Tool/package_V1/qPRAentry")
load_all()
document()
# Remove if you have it installed!!
remove.packages("qPRAentry")
setwd("~/Documentos/ENTRY_qPRA Tool/package_V1")
# Set working directory to the folder in which you have the package file
install.packages("./qPRAentry.tar.gz", repos = NULL, type = "source", dependencies = TRUE)
library(qPRAentry)
ntrade_app()
?rgamma
x <- rgamma(10, 0.64216, 133.92)
x
mean(x)
x <- rgamma(100, 0.64216, 133.92)
mean(x)
plot(0, 0, xlim = c(0, 10), ylim = c(0, 1), type = "n")
curve(dgamma(x, shape = 0.64216, scale = 133.92), from = 0, to = 10, col = i, add = TRUE)
plot(dgamma(x, shape = 0.64216, scale = 133.92), from = 0, to = 10)
plot(dgamma(x, shape = 0.64216, scale = 133.92), from = 0, to = 10, type = "l")
curve(dgamma(x, shape = 0.64216, scale = 133.92), from = 0, to = 10, type = "l")
hist(dgamma(x, shape = 0.64216, scale = 133.92), from = 0, to = 10, type = "l")
hist(dgamma(x, shape = 0.64216, scale = 133.92), from = 0, to = 10)
hist(dgamma(x, shape = 0.64216, scale = 133.92))
# Density function
x <- seq(-3,3,length.out=100)
plot(x, dnorm(x))
x <- seq(0, 0.01, length.out=100)
plot(x, dgamma(x, shape = 0.64216, scale = 133.92))
x <- seq(0, 1000, length.out=1000)
plot(x, dgamma(x, shape = 0.64216, scale = 133.92))
###
par(mfrow=c(1,2))
x <- rgamma(1000, 0.64216, 133.92)
hist(x)
hist(x, freq = FALSE)
1/133.92
x <- rgamma(1000, 0.64216, 133.92)
hist(x)
###
par(mfrow=c(1,1))
x <- rgamma(1000, 0.64216, 133.92)
hist(x)
hist(x, freq = FALSE)
x <- rgamma(1000, 0.64216, scale=133.92)
hist(x)
hist(x, freq = FALSE)
x <- rgamma(10000, 0.64216, scale=133.92)
hist(x, freq = FALSE)
plot(ecdf(x))
hist(x, freq = FALSE)
hist(x)
hist(x, freq = FALSE)
plot(x, dgamma(x, shape = 0.64216, scale = 133.92))
x <- seq(0, 1000, length.out=1000)
plot(x, dgamma(x, shape = 0.64216, scale = 133.92))
hist(x,  dgamma(x, shape = 0.64216, scale = 133.92), freq = FALSE)
hist(dgamma(x, shape = 0.64216, scale = 133.92), freq = FALSE)
x <- rgamma(10000, 0.64216, scale=133.92)
hist(x, freq = FALSE)
x <- rgamma(100000, 0.64216, scale=133.92)
hist(x, freq = FALSE)
x <- rgamma(100, 0.64216, scale=133.92)
hist(x)
hist(x, freq = FALSE)
x <- rgamma(100, 0.64216, scale=1/133.92)
hist(x, freq = FALSE)
hist(x)
?hist
hist(x, density =TRUE)
hist(x, freq = FALSE)
curve(dgamma(x, shape = 0.64216, scale = 133.92)), col = 2, lty = 2, lwd = 2, add = TRUE)
curve(dgamma(x, shape = 0.64216, scale = 1/133.92), col = 2, lty = 2, lwd = 2, add = TRUE)
x <- rgamma(1000, 0.64216, scale=1/133.92)
hist(x, freq = FALSE)
curve(dgamma(x, shape = 0.64216, scale = 1/133.92), col = 2, lty = 2, lwd = 2, add = TRUE)
hist(x)
curve(dgamma(x, shape = 0.64216, scale = 1/133.92), col = 2, lty = 2, lwd = 2, add = TRUE)
hist(x, freq = FALSE)
hist(x, freq = FALSE, ylim=c(0,150))
curve(dgamma(x, shape = 0.64216, scale = 1/133.92), col = 2, lty = 2, lwd = 2, add = TRUE)
hist(x, freq = FALSE, ylim=c(0,200))
curve(dgamma(x, shape = 0.64216, scale = 1/133.92), col = 2, lty = 2, lwd = 2, add = TRUE)
x <- rgamma(100, 0.64216, scale=1/133.92)
hist(x, freq = FALSE, ylim=c(0,200))
hist(x, ylim=c(0,200))
hist(x, freq = FALSE, ylim=c(0,200))
x <- rgamma(10000, 0.64216, scale=1/133.92)
hist(x, freq = FALSE, ylim=c(0,200))
curve(dgamma(x, shape = 0.64216, scale = 1/133.92), col = 2, lty = 2, lwd = 2, add = TRUE)
hist(x, freq = FALSE, ylim=c(0,150))
curve(dgamma(x, shape = 0.64216, scale = 1/133.92), col = 2, lty = 2, lwd = 2, add = TRUE)
plot(x, dgamma(x, shape = 0.64216, rate = 133.92))
x <- seq(0, 1000, length.out=1000)
plot(x, dgamma(x, shape = 0.64216, rate = 133.92))
x <- rgamma(10000, 0.64216, scale=133.92)
mean(x)
xi <- 1/x
mean(xi)
1/500
library(qPRAentry)
detach("package:qPRAentry", unload = TRUE)
library(qPRAentry)
# Read your trade data
# setwd("~/Documentos/ENTRY_qPRA Tool/projects/proj_V1")
intra <- read.csv("../trade_data/Intra_EU_Trade.csv")
getwd()
# Read your trade data
# setwd("~/Documentos/ENTRY_qPRA Tool/projects/proj_V1")
intra <- read.csv("./fresh_grapes/intra.csv")
# Read your trade data
# setwd("~/Documentos/ENTRY_qPRA Tool/projects/proj_V1")
read_file <- function(filepath){
t <- try(read.csv(filepath), silent=TRUE)
if("try-error" %in% class(t)){
t <- read.csv(filepath, row.names = NULL)
if("row.names"%in%colnames(t)){
colnames(t) <- colnames(t)[2:ncol(t)]
t <- t[1:(ncol(t)-1)]
}
}
return(t)
}
intra <- read.csv("./fresh_grapes/intra.csv")
intra <- read_file("./fresh_grapes/intra.csv")
extra <- read_file("./fresh_grapes/extra.csv")
production <- read_file("./fresh_grapes/prod.csv")
production <- prod %>%
# change column name (we need the same column names in all data frames)
rename(reporter = geo) %>%
mutate(reporter = case_when(reporter == "EL" ~ "GR", # Change Greece code
.default = reporter))
# Data preparation
library(dplyr)
production <- prod %>%
# change column name (we need the same column names in all data frames)
rename(reporter = geo) %>%
mutate(reporter = case_when(reporter == "EL" ~ "GR", # Change Greece code
.default = reporter))
production <- production %>%
# change column name (we need the same column names in all data frames)
rename(reporter = geo) %>%
mutate(reporter = case_when(reporter == "EL" ~ "GR", # Change Greece code
.default = reporter))
trade <- trade_data(IDs = unique(intra$reporter),
extra_total = extra[extra$partner == "EU_EXTRA",],
extra_pest = extra[extra$partner != "EU_EXTRA",],
intra_trade = intra,
internal_production = production,
value = "OBS_VALUE",
time_period = "TIME_PERIOD",
units_transform = c("extra_total" = 0.1,
"extra_pest" = 0.1,
"intra_trade" = 0.1,
"internal_production" = 1000))
# Calculation for each year
Nt_yrs <- ntrade(IDs = unique(intra$reporter),
trade = trade)
?ntrade
# With summary of the results of the different years
Nt_s1 <- ntrade(IDs = unique(intra$reporter),
trade = trade,
summarize_ntrade = c("mean", "sd"))
ntrade_app()
packageVersion("golem")
library(golem)
library(golem)
# Remove if you have it installed!!
remove.packages("qPRAentry")
install.packages("./qPRAentry.tar.gz", repos = NULL, type = "source", dependencies = TRUE)
library(qPRAentry)
ntrade_app()
pathway_app()
#########
#logo
library(hexSticker)
library(magick)
img <- image_read("../Designer_v.png")
img <- image_read("./Designer_v.png")
sticker(
subplot = img,
package = "qPRAentry",
s_width = 1.3,
s_height = 1.3,
s_x = 1,
s_y = 1.27,
p_x = 1,
p_y = 0.55,
p_size=19,
h_fill = "black",
h_color = "#22e3ae",
p_color  = "#22e3ae"
) %>% print()
sticker(
subplot = img,
package = "qPRAentry",
s_width = 1.3,
s_height = 1.3,
s_x = 1,
s_y = 1.27,
p_x = 1,
p_y = 0.55,
p_size=19,
h_fill = "black",
h_color = "#22e3ae",
p_color  = "#22e3ae"
) %>% print()
sticker(
subplot = img,
package = "qPRAentry",
s_width = 1.3,
s_height = 1.3,
s_x = 1,
s_y = 1.27,
p_x = 1,
p_y = 0.55,
p_size=19,
h_fill = "black",
h_color = "#22e3ae",
p_color  = "#22e3ae",
filename = "../logo.png"
)
setwd("~/Documentos/GitHub")
setwd("./qPRAentry")
library(devtools)
load_all()
document()
pathway_app()
